import React, { Component, PropTypes } from 'react/addons';let ReactCSSTransitionGroup = React.addons.CSSTransitionGroup;const SUITS = {  'spades': {symbol:"♠", value:1},  'clubs': {symbol:"♣", value:2},  'hearts': {symbol:"♥", value:4},  'diamonds': {symbol:"♦", value:8}};const FACE_VALUES = ['', '','2','3','4','5','6','7','8','9','10','J','Q','K','A'];const HANDS=["Four of a Kind!", "Straight Flush!", "Straight!", "Flush!", "High Card", "One Pair", "Two Pairs", "Royal Flush!!!", "Three of a Kind!", "Full House!" ];class Dealer{  constructor(){    this.deck = [];    this.drawn = 0;    this.createDeck();  }  createDeck(){    // Create an array with all 52 cards    for (var suit = 0; suit < 4; suit++){      for (var rank = 2; rank < 15; rank++){        this.deck.push({rank,suit:Object.keys(SUITS)[suit]});      }    }    // Shuffles the array    // Not the most appropriate type of random for a card game,    // But it's simple. A more appropriate approach would be a Fisher–Yates shuffle    this.deck.sort(()=>(Math.random()*2>1)?1:-1)  }  // increases the total number of cards drawn  // and returns the amount of cards asked  deal(ammount){    if(this.drawn+ammount > 52){      throw "I'm sorry, I don't have enough cards.";    }    let returnArr = this.deck.slice(this.drawn, this.drawn+ammount);    this.drawn = this.drawn + ammount;    return returnArr;  }}var dealer = new Dealer();class Card extends Component {  render(){    let card;    let { rank, suit, ...other } = this.props;    return (    	<div {...other} className="card-group">    			<div className={`front card ${suit} v${rank}`} data-index={`${FACE_VALUES[rank]} ${SUITS[suit].symbol}`}>            <span className="rank">{FACE_VALUES[rank]}</span>            <span className="suit">{SUITS[suit].symbol}</span>          </div>    			<div className="back card" />    	</div>    )  }}Card.propTypes = {  rank: React.PropTypes.oneOf([2,3,4,5,6,7,8,9,10,11,12,13,14]),  suit: React.PropTypes.oneOf(['spades', 'clubs', 'hearts', 'diamonds']),}class PokerGame extends Component {  constructor(){    super(...arguments);    this.state={      hand: [],    }  }  // For convenience, you can copy this function from http://gist.github.com/cassiozen/2e8f18af18021ac68607  // Adapted from the original CPOL-Licensed code by subskybox (http://tinyurl.com/jspokermath)  rankPokerHand() {    let hand = this.state.hand;    if(hand.length < 5) return;    let v, i, o, s = 1 << hand[0].rank | 1 << hand[1].rank | 1 << hand[2].rank | 1 << hand[3].rank | 1 << hand[4].rank;    for (i = 0, v = o = 0; i < 5; i++) {        o = Math.pow(2, hand[i].rank * 4);        v += o * ((v / o & 15) + 1);    }    v = v % 15 - ((s / (s & -s) == 31) || (s == 0x403c) ? 3 : 1);    v -= (SUITS[hand[0].suit].value == (SUITS[hand[1].suit].value | SUITS[hand[2].suit].value | SUITS[hand[3].suit].value | SUITS[hand[4].suit].value)) * ((s == 0x7c00) ? -5 : 1);    return v;  }  componentDidMount(){    this.setState({hand:dealer.deal(5)});  }  handleDeal(e){    let newHand = this.state.hand;    // Loop through all checkboxes to see which cards will be changed    for (let i = 0; i < 5; i++) {      // If the user didn't hold the card, change it      if(!this.refs['hold' + i].getDOMNode().checked) {        let newCard = dealer.deal(1)[0];        newHand = React.addons.update(newHand, {$splice: [[i, 1, newCard]]});      }    }    this.setState({hand:newHand})  }  render(){    let pokerRating = this.rankPokerHand();    let pokerHand = pokerRating?<div key={pokerRating} className='card-rank'><h1>{HANDS[pokerRating]}</h1></div> : null    let cards = this.state.hand.map(      (card, index)=><Card key={card.rank+card.suit}                           rank={card.rank}                           suit={card.suit}                           style={{marginLeft:7*index+'em'}} />)    return (      <div className='game'>        <ReactCSSTransitionGroup transitionName="fade">          {pokerHand}        </ReactCSSTransitionGroup>        <div className='cards'>          <ReactCSSTransitionGroup transitionName="card">            {cards}          </ ReactCSSTransitionGroup>        </div>        <div className='controls'>          <label className='card-hold'><input type="checkbox" ref='hold0' />Hold</label>          <label className='card-hold'><input type="checkbox" ref='hold1' />Hold</label>          <label className='card-hold'><input type="checkbox" ref='hold2' />Hold</label>          <label className='card-hold'><input type="checkbox" ref='hold3' />Hold</label>          <label className='card-hold'><input type="checkbox" ref='hold4' />Hold</label>          <button className='card-deal' onClick={this.handleDeal.bind(this)}>Deal</button>        </div>      </div>    )  }}React.render(<PokerGame />, document.getElementById('app'));