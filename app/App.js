import React, { Component, PropTypes } from 'react';const SUITS = {  'spades': {symbol:"♠", value:1},  'clubs': {symbol:"♣", value:2},  'hearts': {symbol:"♥", value:4},  'diamonds': {symbol:"♦", value:8}};const FACE_VALUES = ['', '','2','3','4','5','6','7','8','9','10','J','Q','K','A'];const HANDS=["4 of a Kind", "Straight Flush", "Straight", "Flush", "High Card",       "1 Pair", "2 Pair", "Royal Flush", "3 of a Kind", "Full House" ];class Deck extends Component {  constructor(){    super(...arguments);    this.state={      pickedCards: [],    }  }  // For convenience, you can copy this function from http://gist.github.com/cassiozen/2e8f18af18021ac68607  // Adapted from the original CPOL-Licensed code by subskybox (http://tinyurl.com/jspokermath)  rankPokerHand() {    let pc = this.state.pickedCards;    let v, i, o, s = 1 << pc[0].rank | 1 << pc[1].rank | 1 << pc[2].rank | 1 << pc[3].rank | 1 << pc[4].rank;    for (i = 0, v = o = 0; i < 5; i++) {        o = Math.pow(2, pc[i].rank * 4);        v += o * ((v / o & 15) + 1);    }    v = v % 15 - ((s / (s & -s) == 31) || (s == 0x403c) ? 3 : 1);    v -= (SUITS[pc[0].suit].value == (SUITS[pc[1].suit].value | SUITS[pc[2].suit].value | SUITS[pc[3].suit].value | SUITS[pc[4].suit].value)) * ((s == 0x7c00) ? -5 : 1);    console.log(HANDS[v])    return v;  }  getRandomCard(){    if(this.state.pickedCards.length === 52) return;    let rank = Math.floor(Math.random() * 13)+2;    let suit = Object.keys(SUITS)[Math.floor(Math.random() * 4)];    let id = rank+suit;    if(this.state.pickedCards.map((card)=>card.id).indexOf(id)===-1){      this.state.pickedCards.push({id,rank,suit});    } else {      this.getRandomCard();    }  }  componentWillMount(){    // First mount of the deck: Draw 5 cards    for (var i = 0; i < 5; i++) {      this.getRandomCard()    }    this.rankPokerHand();  }  render(){    let cards = this.state.pickedCards.map((card, index)=><Card key={card.id} rank={card.rank} suit={card.suit} style={{float:'left'}} />)    return (      <div>        {cards}      </div>    )  }}class Card extends Component {  render(){    let card;    let { rank, suit, ...other } = this.props;    if(rank === undefined || suit === undefined){      card = <div className="card back" {...this.props} />    } else {      card = (        <div {...other} className={`card ${suit} v${rank}`}>          <span className="rank">{FACE_VALUES[rank]}</span>          <span className="suit">{SUITS[suit].symbol}</span>        </div>      )    }    return (      <div>        {card}      </div>    )  }}Card.propTypes = {  rank: React.PropTypes.oneOf([2,3,4,5,6,7,8,9,10,11,12,13,14]),  suit: React.PropTypes.oneOf(['spades', 'clubs', 'hearts', 'diamonds']),}class App extends Component {  render(){    return (      <div>        <Deck />      </div>    );  }}React.render(<App />, document.getElementById('app'));