import React, { Component, PropTypes } from 'react/addons';let ReactCSSTransitionGroup = React.addons.CSSTransitionGroup;const SUITS = {  'spades': {symbol:"♠", value:1},  'clubs': {symbol:"♣", value:2},  'hearts': {symbol:"♥", value:4},  'diamonds': {symbol:"♦", value:8}};const FACE_VALUES = ['', '','2','3','4','5','6','7','8','9','10','J','Q','K','A'];const HANDS=["Four of a Kind!", "Straight Flush!", "Straight!", "Flush!", "High Card", "One Pair", "Two Pairs", "Royal Flush!!!", "Three of a Kind!", "Full House!" ];class Dealer{  constructor(){    this.deck = [];    this.drawn = 0;    this.createDeck();  }  createDeck(){    // Create an array with all 52 cards    for (var suit = 0; suit < 4; suit++){      for (var rank = 2; rank < 15; rank++){        this.deck.push({rank,suit:Object.keys(SUITS)[suit]});      }    }    // Shuffles the array    this.deck.sort(()=>(Math.random()*2>1)?1:-1)  }  // increases the total number of cards drawn  // and returns the amount of cards asked  deal(ammount){    if(this.drawn+ammount > 52){      throw "I'm sorry, I don't have enough cards.";    }    let returnArr = this.deck.slice(this.drawn, this.drawn+ammount);    this.drawn = this.drawn + ammount;    return returnArr;  }}var dealer = new Dealer();class Card extends Component {  render(){    let card;    let { rank, suit } = this.props;    return (      <div className="flip-container">      	<div className="flipper">      			<div className={`front card ${suit} v${rank}`}>              <span className="rank">{FACE_VALUES[rank]}</span>              <span className="suit">{SUITS[suit].symbol}</span>            </div>      			<div className="back card" />      	</div>      </div>    )  }}Card.propTypes = {  rank: React.PropTypes.oneOf([2,3,4,5,6,7,8,9,10,11,12,13,14]),  suit: React.PropTypes.oneOf(['spades', 'clubs', 'hearts', 'diamonds']),}class PokerGame extends Component {  constructor(){    super(...arguments);    this.state={      hand: [],    }  }  // For convenience, you can copy this function from http://gist.github.com/cassiozen/2e8f18af18021ac68607  // Adapted from the original CPOL-Licensed code by subskybox (http://tinyurl.com/jspokermath)  rankPokerHand() {    let hand = this.state.hand;    let v, i, o, s = 1 << hand[0].rank | 1 << hand[1].rank | 1 << hand[2].rank | 1 << hand[3].rank | 1 << hand[4].rank;    for (i = 0, v = o = 0; i < 5; i++) {        o = Math.pow(2, hand[i].rank * 4);        v += o * ((v / o & 15) + 1);    }    v = v % 15 - ((s / (s & -s) == 31) || (s == 0x403c) ? 3 : 1);    v -= (SUITS[hand[0].suit].value == (SUITS[hand[1].suit].value | SUITS[hand[2].suit].value | SUITS[hand[3].suit].value | SUITS[hand[4].suit].value)) * ((s == 0x7c00) ? -5 : 1);    return (HANDS[v])  }  componentDidMount(){    this.setState({hand:dealer.deal(5)});  }  handleSubmit(e){    let newHand = this.state.hand;    // Loop through all checkboxes to see which cards will be changed    for (let i = 0; i < 5; i++) {      // If the user didn't hold the card, change it      if(!this.refs['hold-' + i].getDOMNode().checked) {        let newCard = dealer.deal(1)[0];        newHand = React.addons.update(newHand, {$splice: [[i, 1, newCard]]});      }    }    this.setState({hand:newHand})    e.stopPropagation();  }  render(){    let cards = this.state.hand.map((card, index)=><Card key={card.rank+card.suit} rank={card.rank} suit={card.suit} />)    return (      <div>        <ReactCSSTransitionGroup transitionName="fade">          {cards}        </ ReactCSSTransitionGroup>        <input type="checkbox" ref='hold-0' />        <input type="checkbox" ref='hold-1' />        <input type="checkbox" ref='hold-2' />        <input type="checkbox" ref='hold-3' />        <input type="checkbox" ref='hold-4' />        <button onClick={this.handleSubmit.bind(this)}>Deal</button>      </div>    )  }}React.render(<PokerGame />, document.getElementById('app'));////// class Deck extends Component {//   constructor(){//     super(...arguments);//     this.state={//       pickedCards: [],//     }//   }////   // For convenience, you can copy this function from http://gist.github.com/cassiozen/2e8f18af18021ac68607//   // Adapted from the original CPOL-Licensed code by subskybox (http://tinyurl.com/jspokermath)//   rankPokerHand() {//     let hand = this.state.pickedCards;////     let v, i, o, s = 1 << hand[0].rank | 1 << hand[1].rank | 1 << hand[2].rank | 1 << hand[3].rank | 1 << pc[4].rank;//     for (i = 0, v = o = 0; i < 5; i++) {//         o = Math.pow(2, pc[i].rank * 4);//         v += o * ((v / o & 15) + 1);//     }//     v = v % 15 - ((s / (s & -s) == 31) || (s == 0x403c) ? 3 : 1);//     v -= (SUITS[pc[0].suit].value == (SUITS[pc[1].suit].value | SUITS[pc[2].suit].value | SUITS[pc[3].suit].value | SUITS[pc[4].suit].value)) * ((s == 0x7c00) ? -5 : 1);//     console.log(HANDS[v])//     return v;//   }////   getRandomCard(){//     if(this.state.pickedCards.length === 52) return;////     let rank = Math.floor(Math.random() * 13)+2;//     let suit = Object.keys(SUITS)[Math.floor(Math.random() * 4)];//     let id = rank+suit;////     if(this.state.pickedCards.map((card)=>card.id).indexOf(id)===-1){//       this.state.pickedCards.push({id,rank,suit});//     } else {//       this.getRandomCard();//     }//   }//////   getRandomCard(){//     if(this.state.pickedCards.length === 52) return;////     let rank = Math.floor(Math.random() * 13)+2;//     let suit = Object.keys(SUITS)[Math.floor(Math.random() * 4)];//     let id = rank+suit;////     if(this.state.pickedCards.map((card)=>card.id).indexOf(id)===-1){//       return {id,rank,suit};//     } else {//       return this.getRandomCard();//     }//   }////   pickRandomCard(){//     this.state.pickedCards.push(this.getRandomCard())//   }//////   componentWillMount(){//     // First mount of the deck: Draw 5 cards//     // TODO just one state change, please. And do not manipulate this.state directly//     for (let i = 0; i < 5; i++) {//       this.pickRandomCard();////     }//     //this.rankPokerHand();//   }////   handleSubmit(e){////     let changedCards = this.state.pickedCards;////     // Loop through all checkboxes to see which cards will be changed//     for (let i = 0; i < 5; i++) {//       // If the user didn't hold the card, change it//       if(!this.refs['hold-' + i].getDOMNode().checked) {//         let newCard = this.getRandomCard();//         changedCards = React.addons.update(changedCards, {$splice: [[i, 1, newCard]]});//         this.setState({pickedCards:changedCards})//       }//     }//////     e.stopPropagation();////   }////   render(){//     console.log(this.state.pickedCards);//     let cards = this.state.pickedCards.map((card, index)=><Card key={card.id} rank={card.rank} suit={card.suit} />)//     return (//       <div>////           {cards}////////           <input type="checkbox" ref='hold-0' />//           <input type="checkbox" ref='hold-1' />//           <input type="checkbox" ref='hold-2' />//           <input type="checkbox" ref='hold-3' />//           <input type="checkbox" ref='hold-4' />//           <button onClick={this.handleSubmit.bind(this)}>Deal</button>////////       </div>//     )//   }// }////////////// class App extends Component {//   render(){//     return (//       <div>//         <Deck />//       </div>////     );//   }// }//////// React.render(<App />, document.getElementById('app'));